package components

import "time"
import "slices"
import "strings"

import . "github.com/mcg-dallgow/mcg-display/types"

templ Events(events map[string][]Event) {
	@Layout(eventsMain(events))
}

// DO NOT REMOVE COMMENTS - REQUIRED BY TAILWIND:
// duration-[5000ms] duration-[10000ms] duration-[15000ms]
templ eventsMain(events map[string][]Event) {
	<div class="h-full flex-col text-slate-700">
		<div class="flex">
			for _, date := range getDates(events) {
				<div class="event-header sticky z-10 w-1/5 bg-slate-50 py-4 text-center">
					<p class="text-3xl font-bold">
						{ getWeekday(parseDate(date)) }
					</p>
					<p class="text-2xl">
						{ parseDate(date).Format("02.01.2006") }
					</p>
				</div>
			}
		</div>
		<div class="flex space-x-3 px-3 pb-3">
			for _, date := range getDates(events) {
				<div class="w-1/5">
					<div class="event-list z-0 flex-col space-y-3 transition-transform ease-linear">
						for _, event := range events[date] {
							@eventBox(event)
						}
					</div>
				</div>
			}
		</div>
	</div>
	<script type="text/javascript">
		const eventHeader = document.getElementsByClassName("event-header")[0];
		const columns = document.getElementsByClassName("event-list");
		let direction = -1;

		const wait = 5000;
		let maxDuration = 0;
		for (const column of columns) {
			const overflow = column.scrollHeight - screen.height + eventHeader.scrollHeight + 10;

			if (overflow > 0) {
				const duration = Math.min(Math.round(overflow / 100), 3) * 5000;
				column.classList.add('duration-['+duration+"ms]");
				maxDuration = Math.max(maxDuration, duration);
			}
		}

		setTimeout(() => {
			animation();
			setInterval(animation, maxDuration + wait);
		}, 5000);
		setInterval(() => window.location.reload(true), 4 * (maxDuration+wait));

		function animation() {
			for (const column of columns) {
				if (column.scrollHeight > (screen.height - eventHeader.scrollHeight)) {
					const overflow = direction * (column.scrollHeight - screen.height + eventHeader.scrollHeight + 10)
					column.style.transform = "translateY("+overflow+"px)";
				}
			}
			direction = direction == 0 ? -1 : 0;
		}
	</script>
}

// DO NOT REMOVE COMMENTS - REQUIRED BY TAILWIND:
// Öffentlich/AG:     bg-emerald-400  bg-[#D6E4E1]
// Prüfung:           bg-rose-400     bg-[#E7D8DD]
// Lernende/SekI+II:  bg-amber-400    bg-[#E8E2DB]
// Lehrkräfte:        bg-sky-400      bg-[#D6E1ED]
templ eventBox(event Event) {
	<div class={ "hyphens-auto rounded-xl px-2.5 py-2.5 bg-" + event.Category.BackgroundColor() }>
		<div class="flex">
			<div class={ "min-w-3 mr-2 rounded-xl bg-" + event.Category.Color() }></div>
			<div class="w-full pr-1">
				<div class="flex justify-between pb-0.5 text-lg">
					<p>
						if !event.FullDay {
							{ event.Start.Format("15:04") }
							if !event.Start.Equal(event.End) {
								{ " - " + event.End.Format("15:04") }
							}
						}
					</p>
					<p>{ event.Location }</p>
				</div>
				<p class="text-xl font-bold">{ event.Title }</p>
				if len(event.Description) < 75 {
					<p class="pt-0.5 text-lg">
						for i, line := range strings.Split(event.Description, "\n") {
							if i > 0 {
								<br/>
							}
							{ line }
						}
					</p>
				}
			</div>
		</div>
	</div>
}

func getDates(events map[string][]Event) (dates []string) {
	dates = make([]string, 0)
	for date, dayEvents := range events {
		if len(dates) >= 5 {
			break
		}
		weekday := parseDate(date).Weekday()
		if len(dayEvents) > 0 || (weekday != 0 && weekday != 6) {
			dates = append(dates, date)
		}
	}
	slices.Sort(dates)
	return dates
}

func parseDate(text string) (date time.Time) {
	date, _ = time.Parse("2006-01-02", text)
	return date
}

func getWeekday(date time.Time) string {
	weekdaysGer := []string{
		"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag",
	}

	return weekdaysGer[date.Weekday()]
}
